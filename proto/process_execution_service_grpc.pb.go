// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: proto/process_execution_service.proto

package process_execution_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProcessExecutionService_GetTreatemtsByPatientID_FullMethodName = "/alt_team.process_execution_service.ProcessExecutionService/GetTreatemtsByPatientID"
	ProcessExecutionService_GetTreatmentByID_FullMethodName        = "/alt_team.process_execution_service.ProcessExecutionService/GetTreatmentByID"
)

// ProcessExecutionServiceClient is the client API for ProcessExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessExecutionServiceClient interface {
	GetTreatemtsByPatientID(ctx context.Context, in *GetTreatemtsByPatientIDRequest, opts ...grpc.CallOption) (*GetTreatemtsByPatientIDResponse, error)
	GetTreatmentByID(ctx context.Context, in *GetTreatmentByIDRequest, opts ...grpc.CallOption) (*GetTreatmentByIDResponse, error)
}

type processExecutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessExecutionServiceClient(cc grpc.ClientConnInterface) ProcessExecutionServiceClient {
	return &processExecutionServiceClient{cc}
}

func (c *processExecutionServiceClient) GetTreatemtsByPatientID(ctx context.Context, in *GetTreatemtsByPatientIDRequest, opts ...grpc.CallOption) (*GetTreatemtsByPatientIDResponse, error) {
	out := new(GetTreatemtsByPatientIDResponse)
	err := c.cc.Invoke(ctx, ProcessExecutionService_GetTreatemtsByPatientID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processExecutionServiceClient) GetTreatmentByID(ctx context.Context, in *GetTreatmentByIDRequest, opts ...grpc.CallOption) (*GetTreatmentByIDResponse, error) {
	out := new(GetTreatmentByIDResponse)
	err := c.cc.Invoke(ctx, ProcessExecutionService_GetTreatmentByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessExecutionServiceServer is the server API for ProcessExecutionService service.
// All implementations must embed UnimplementedProcessExecutionServiceServer
// for forward compatibility
type ProcessExecutionServiceServer interface {
	GetTreatemtsByPatientID(context.Context, *GetTreatemtsByPatientIDRequest) (*GetTreatemtsByPatientIDResponse, error)
	GetTreatmentByID(context.Context, *GetTreatmentByIDRequest) (*GetTreatmentByIDResponse, error)
	mustEmbedUnimplementedProcessExecutionServiceServer()
}

// UnimplementedProcessExecutionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProcessExecutionServiceServer struct {
}

func (UnimplementedProcessExecutionServiceServer) GetTreatemtsByPatientID(context.Context, *GetTreatemtsByPatientIDRequest) (*GetTreatemtsByPatientIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreatemtsByPatientID not implemented")
}
func (UnimplementedProcessExecutionServiceServer) GetTreatmentByID(context.Context, *GetTreatmentByIDRequest) (*GetTreatmentByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreatmentByID not implemented")
}
func (UnimplementedProcessExecutionServiceServer) mustEmbedUnimplementedProcessExecutionServiceServer() {
}

// UnsafeProcessExecutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessExecutionServiceServer will
// result in compilation errors.
type UnsafeProcessExecutionServiceServer interface {
	mustEmbedUnimplementedProcessExecutionServiceServer()
}

func RegisterProcessExecutionServiceServer(s grpc.ServiceRegistrar, srv ProcessExecutionServiceServer) {
	s.RegisterService(&ProcessExecutionService_ServiceDesc, srv)
}

func _ProcessExecutionService_GetTreatemtsByPatientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreatemtsByPatientIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessExecutionServiceServer).GetTreatemtsByPatientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessExecutionService_GetTreatemtsByPatientID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessExecutionServiceServer).GetTreatemtsByPatientID(ctx, req.(*GetTreatemtsByPatientIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessExecutionService_GetTreatmentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreatmentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessExecutionServiceServer).GetTreatmentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessExecutionService_GetTreatmentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessExecutionServiceServer).GetTreatmentByID(ctx, req.(*GetTreatmentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProcessExecutionService_ServiceDesc is the grpc.ServiceDesc for ProcessExecutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessExecutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alt_team.process_execution_service.ProcessExecutionService",
	HandlerType: (*ProcessExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTreatemtsByPatientID",
			Handler:    _ProcessExecutionService_GetTreatemtsByPatientID_Handler,
		},
		{
			MethodName: "GetTreatmentByID",
			Handler:    _ProcessExecutionService_GetTreatmentByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/process_execution_service.proto",
}
