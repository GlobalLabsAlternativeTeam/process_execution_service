// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: proto/process_execution_service.proto

package process_execution_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TreatmentStatus int32

const (
	TreatmentStatus_TREATMENT_STATUS_UNSPECIFIED TreatmentStatus = 0
	TreatmentStatus_TREATMENT_STATUS_RUNNING     TreatmentStatus = 1
	TreatmentStatus_TREATMENT_STATUS_BLOCKED     TreatmentStatus = 2
	TreatmentStatus_TREATMENT_STATUS_COMPLETED   TreatmentStatus = 3
	TreatmentStatus_TREATMENT_STATUS_CANCELLED   TreatmentStatus = 4
)

// Enum value maps for TreatmentStatus.
var (
	TreatmentStatus_name = map[int32]string{
		0: "TREATMENT_STATUS_UNSPECIFIED",
		1: "TREATMENT_STATUS_RUNNING",
		2: "TREATMENT_STATUS_BLOCKED",
		3: "TREATMENT_STATUS_COMPLETED",
		4: "TREATMENT_STATUS_CANCELLED",
	}
	TreatmentStatus_value = map[string]int32{
		"TREATMENT_STATUS_UNSPECIFIED": 0,
		"TREATMENT_STATUS_RUNNING":     1,
		"TREATMENT_STATUS_BLOCKED":     2,
		"TREATMENT_STATUS_COMPLETED":   3,
		"TREATMENT_STATUS_CANCELLED":   4,
	}
)

func (x TreatmentStatus) Enum() *TreatmentStatus {
	p := new(TreatmentStatus)
	*p = x
	return p
}

func (x TreatmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TreatmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_process_execution_service_proto_enumTypes[0].Descriptor()
}

func (TreatmentStatus) Type() protoreflect.EnumType {
	return &file_proto_process_execution_service_proto_enumTypes[0]
}

func (x TreatmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TreatmentStatus.Descriptor instead.
func (TreatmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{0}
}

type TaskStatus int32

const (
	TaskStatus_TASK_STATUS_UNSPECIFIED TaskStatus = 0
	TaskStatus_TASK_STATUS_NOT_STARTED TaskStatus = 1
	TaskStatus_TASK_STATUS_IN_PROGRESS TaskStatus = 2
	TaskStatus_TASK_STATUS_BLOCKED     TaskStatus = 3
	TaskStatus_TASK_STATUS_DONE        TaskStatus = 4
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_STATUS_UNSPECIFIED",
		1: "TASK_STATUS_NOT_STARTED",
		2: "TASK_STATUS_IN_PROGRESS",
		3: "TASK_STATUS_BLOCKED",
		4: "TASK_STATUS_DONE",
	}
	TaskStatus_value = map[string]int32{
		"TASK_STATUS_UNSPECIFIED": 0,
		"TASK_STATUS_NOT_STARTED": 1,
		"TASK_STATUS_IN_PROGRESS": 2,
		"TASK_STATUS_BLOCKED":     3,
		"TASK_STATUS_DONE":        4,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_process_execution_service_proto_enumTypes[1].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_proto_process_execution_service_proto_enumTypes[1]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{1}
}

type PatternInstanceStatus int32

const (
	PatternInstanceStatus_PATTERN_INSTANCE_STATUS_STATUS_UNSPECIFIED PatternInstanceStatus = 0
	PatternInstanceStatus_PATTERN_INSTANCE_STATUS_NOT_STARTED        PatternInstanceStatus = 1
	PatternInstanceStatus_PATTERN_INSTANCE_STATUS_STATUS_RUNNING     PatternInstanceStatus = 2
	PatternInstanceStatus_PATTERN_INSTANCE_STATUS_STATUS_BLOCKED     PatternInstanceStatus = 3
	PatternInstanceStatus_PATTERN_INSTANCE_STATUS_STATUS_COMPLETED   PatternInstanceStatus = 4
	PatternInstanceStatus_PATTERN_INSTANCE_STATUS_STATUS_CANCELLED   PatternInstanceStatus = 5
)

// Enum value maps for PatternInstanceStatus.
var (
	PatternInstanceStatus_name = map[int32]string{
		0: "PATTERN_INSTANCE_STATUS_STATUS_UNSPECIFIED",
		1: "PATTERN_INSTANCE_STATUS_NOT_STARTED",
		2: "PATTERN_INSTANCE_STATUS_STATUS_RUNNING",
		3: "PATTERN_INSTANCE_STATUS_STATUS_BLOCKED",
		4: "PATTERN_INSTANCE_STATUS_STATUS_COMPLETED",
		5: "PATTERN_INSTANCE_STATUS_STATUS_CANCELLED",
	}
	PatternInstanceStatus_value = map[string]int32{
		"PATTERN_INSTANCE_STATUS_STATUS_UNSPECIFIED": 0,
		"PATTERN_INSTANCE_STATUS_NOT_STARTED":        1,
		"PATTERN_INSTANCE_STATUS_STATUS_RUNNING":     2,
		"PATTERN_INSTANCE_STATUS_STATUS_BLOCKED":     3,
		"PATTERN_INSTANCE_STATUS_STATUS_COMPLETED":   4,
		"PATTERN_INSTANCE_STATUS_STATUS_CANCELLED":   5,
	}
)

func (x PatternInstanceStatus) Enum() *PatternInstanceStatus {
	p := new(PatternInstanceStatus)
	*p = x
	return p
}

func (x PatternInstanceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternInstanceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_process_execution_service_proto_enumTypes[2].Descriptor()
}

func (PatternInstanceStatus) Type() protoreflect.EnumType {
	return &file_proto_process_execution_service_proto_enumTypes[2]
}

func (x PatternInstanceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternInstanceStatus.Descriptor instead.
func (PatternInstanceStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{2}
}

type GetTreatmentsByPatientIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId string `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
}

func (x *GetTreatmentsByPatientIDRequest) Reset() {
	*x = GetTreatmentsByPatientIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_execution_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreatmentsByPatientIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreatmentsByPatientIDRequest) ProtoMessage() {}

func (x *GetTreatmentsByPatientIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_execution_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreatmentsByPatientIDRequest.ProtoReflect.Descriptor instead.
func (*GetTreatmentsByPatientIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetTreatmentsByPatientIDRequest) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

type GetTreatmentsByPatientIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatientId      string            `protobuf:"bytes,1,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	TreatmentLight []*TreatmentLight `protobuf:"bytes,2,rep,name=treatment_light,json=treatmentLight,proto3" json:"treatment_light,omitempty"`
}

func (x *GetTreatmentsByPatientIDResponse) Reset() {
	*x = GetTreatmentsByPatientIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_execution_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreatmentsByPatientIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreatmentsByPatientIDResponse) ProtoMessage() {}

func (x *GetTreatmentsByPatientIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_execution_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreatmentsByPatientIDResponse.ProtoReflect.Descriptor instead.
func (*GetTreatmentsByPatientIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetTreatmentsByPatientIDResponse) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *GetTreatmentsByPatientIDResponse) GetTreatmentLight() []*TreatmentLight {
	if x != nil {
		return x.TreatmentLight
	}
	return nil
}

type TreatmentLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreatmentId       string  `protobuf:"bytes,1,opt,name=treatment_id,json=treatmentId,proto3" json:"treatment_id,omitempty"`
	TreatmentName     string  `protobuf:"bytes,2,opt,name=treatment_name,json=treatmentName,proto3" json:"treatment_name,omitempty"`
	TreatmentStatus   string  `protobuf:"bytes,3,opt,name=treatment_status,json=treatmentStatus,proto3" json:"treatment_status,omitempty"`
	TreatmentProgress float32 `protobuf:"fixed32,4,opt,name=treatment_progress,json=treatmentProgress,proto3" json:"treatment_progress,omitempty"`
}

func (x *TreatmentLight) Reset() {
	*x = TreatmentLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_execution_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreatmentLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreatmentLight) ProtoMessage() {}

func (x *TreatmentLight) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_execution_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreatmentLight.ProtoReflect.Descriptor instead.
func (*TreatmentLight) Descriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{2}
}

func (x *TreatmentLight) GetTreatmentId() string {
	if x != nil {
		return x.TreatmentId
	}
	return ""
}

func (x *TreatmentLight) GetTreatmentName() string {
	if x != nil {
		return x.TreatmentName
	}
	return ""
}

func (x *TreatmentLight) GetTreatmentStatus() string {
	if x != nil {
		return x.TreatmentStatus
	}
	return ""
}

func (x *TreatmentLight) GetTreatmentProgress() float32 {
	if x != nil {
		return x.TreatmentProgress
	}
	return 0
}

type GetTreatmentByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreatmentId string `protobuf:"bytes,1,opt,name=treatment_id,json=treatmentId,proto3" json:"treatment_id,omitempty"`
}

func (x *GetTreatmentByIDRequest) Reset() {
	*x = GetTreatmentByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_execution_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreatmentByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreatmentByIDRequest) ProtoMessage() {}

func (x *GetTreatmentByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_execution_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreatmentByIDRequest.ProtoReflect.Descriptor instead.
func (*GetTreatmentByIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetTreatmentByIDRequest) GetTreatmentId() string {
	if x != nil {
		return x.TreatmentId
	}
	return ""
}

type GetTreatmentByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Treatment *Treatment `protobuf:"bytes,1,opt,name=treatment,proto3" json:"treatment,omitempty"`
}

func (x *GetTreatmentByIDResponse) Reset() {
	*x = GetTreatmentByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_execution_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreatmentByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreatmentByIDResponse) ProtoMessage() {}

func (x *GetTreatmentByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_execution_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreatmentByIDResponse.ProtoReflect.Descriptor instead.
func (*GetTreatmentByIDResponse) Descriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetTreatmentByIDResponse) GetTreatment() *Treatment {
	if x != nil {
		return x.Treatment
	}
	return nil
}

type Treatment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreatmentId     string                 `protobuf:"bytes,1,opt,name=treatment_id,json=treatmentId,proto3" json:"treatment_id,omitempty"`
	DoctorId        string                 `protobuf:"bytes,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"`
	PatientId       string                 `protobuf:"bytes,3,opt,name=patient_id,json=patientId,proto3" json:"patient_id,omitempty"`
	Status          TreatmentStatus        `protobuf:"varint,4,opt,name=status,proto3,enum=alt_team.process_execution_service.TreatmentStatus" json:"status,omitempty"`
	PatternInstance *PatternInstance       `protobuf:"bytes,5,opt,name=pattern_instance,json=patternInstance,proto3" json:"pattern_instance,omitempty"`
	StartedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	DeletedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *Treatment) Reset() {
	*x = Treatment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_execution_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treatment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treatment) ProtoMessage() {}

func (x *Treatment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_execution_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treatment.ProtoReflect.Descriptor instead.
func (*Treatment) Descriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{5}
}

func (x *Treatment) GetTreatmentId() string {
	if x != nil {
		return x.TreatmentId
	}
	return ""
}

func (x *Treatment) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *Treatment) GetPatientId() string {
	if x != nil {
		return x.PatientId
	}
	return ""
}

func (x *Treatment) GetStatus() TreatmentStatus {
	if x != nil {
		return x.Status
	}
	return TreatmentStatus_TREATMENT_STATUS_UNSPECIFIED
}

func (x *Treatment) GetPatternInstance() *PatternInstance {
	if x != nil {
		return x.PatternInstance
	}
	return nil
}

func (x *Treatment) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Treatment) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *Treatment) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                            // id of the task (unique for this schema)
	Level       int32                   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`                                                      // level of the task
	Name        string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                         //name aof the task
	Status      TaskStatus              `protobuf:"varint,4,opt,name=status,proto3,enum=alt_team.process_execution_service.TaskStatus" json:"status,omitempty"` //status of the task
	BlockedBy   []int64                 `protobuf:"varint,5,rep,packed,name=blocked_by,json=blockedBy,proto3" json:"blocked_by,omitempty"`                      // id of the task that block it
	Resposinble *uint64                 `protobuf:"varint,6,opt,name=resposinble,proto3,oneof" json:"resposinble,omitempty"`                                    // person responsible for this task
	TimeLimit   *int64                  `protobuf:"varint,7,opt,name=time_limit,json=timeLimit,proto3,oneof" json:"time_limit,omitempty"`                       // time limit for task in minutes
	Children    []*Task                 `protobuf:"bytes,8,rep,name=children,proto3" json:"children,omitempty"`                                                 // subtasks of this task
	Comment     *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`                                                   // comment
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_execution_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_execution_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{6}
}

func (x *Task) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (x *Task) GetBlockedBy() []int64 {
	if x != nil {
		return x.BlockedBy
	}
	return nil
}

func (x *Task) GetResposinble() uint64 {
	if x != nil && x.Resposinble != nil {
		return *x.Resposinble
	}
	return 0
}

func (x *Task) GetTimeLimit() int64 {
	if x != nil && x.TimeLimit != nil {
		return *x.TimeLimit
	}
	return 0
}

func (x *Task) GetChildren() []*Task {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Task) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

type PatternInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId  string                 `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Status      PatternInstanceStatus  `protobuf:"varint,2,opt,name=status,proto3,enum=alt_team.process_execution_service.PatternInstanceStatus" json:"status,omitempty"`
	PatternId   string                 `protobuf:"bytes,3,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"`
	AuthorId    string                 `protobuf:"bytes,4,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	PatternName string                 `protobuf:"bytes,5,opt,name=pattern_name,json=patternName,proto3" json:"pattern_name,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Tasks       []*Task                `protobuf:"bytes,9,rep,name=tasks,proto3" json:"tasks,omitempty"` // tasks
}

func (x *PatternInstance) Reset() {
	*x = PatternInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_execution_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternInstance) ProtoMessage() {}

func (x *PatternInstance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_execution_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternInstance.ProtoReflect.Descriptor instead.
func (*PatternInstance) Descriptor() ([]byte, []int) {
	return file_proto_process_execution_service_proto_rawDescGZIP(), []int{7}
}

func (x *PatternInstance) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *PatternInstance) GetStatus() PatternInstanceStatus {
	if x != nil {
		return x.Status
	}
	return PatternInstanceStatus_PATTERN_INSTANCE_STATUS_STATUS_UNSPECIFIED
}

func (x *PatternInstance) GetPatternId() string {
	if x != nil {
		return x.PatternId
	}
	return ""
}

func (x *PatternInstance) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *PatternInstance) GetPatternName() string {
	if x != nil {
		return x.PatternName
	}
	return ""
}

func (x *PatternInstance) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PatternInstance) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PatternInstance) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *PatternInstance) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

var File_proto_process_execution_service_proto protoreflect.FileDescriptor

var file_proto_process_execution_service_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9e,
	0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x0e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xb4, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65,
	0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xca, 0x03,
	0x0a, 0x09, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x6c, 0x74,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8f, 0x03, 0x0a, 0x04, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x6e,
	0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x6e, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x6e, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd5, 0x03, 0x0a,
	0x0f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2a, 0xaf, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x45, 0x41,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52,
	0x45, 0x41, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x45, 0x41,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x45, 0x41, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x92, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0xa4, 0x02, 0x0a, 0x15,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2a,
	0x0a, 0x26, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x32, 0xd1, 0x02, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa5,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x43, 0x2e, 0x61, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x44, 0x2e, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x3b, 0x2e, 0x61, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x6c, 0x74, 0x5f, 0x74,
	0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1d, 0x5a, 0x1b, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_process_execution_service_proto_rawDescOnce sync.Once
	file_proto_process_execution_service_proto_rawDescData = file_proto_process_execution_service_proto_rawDesc
)

func file_proto_process_execution_service_proto_rawDescGZIP() []byte {
	file_proto_process_execution_service_proto_rawDescOnce.Do(func() {
		file_proto_process_execution_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_process_execution_service_proto_rawDescData)
	})
	return file_proto_process_execution_service_proto_rawDescData
}

var file_proto_process_execution_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_process_execution_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_process_execution_service_proto_goTypes = []interface{}{
	(TreatmentStatus)(0),                     // 0: alt_team.process_execution_service.TreatmentStatus
	(TaskStatus)(0),                          // 1: alt_team.process_execution_service.TaskStatus
	(PatternInstanceStatus)(0),               // 2: alt_team.process_execution_service.PatternInstanceStatus
	(*GetTreatmentsByPatientIDRequest)(nil),  // 3: alt_team.process_execution_service.GetTreatmentsByPatientIDRequest
	(*GetTreatmentsByPatientIDResponse)(nil), // 4: alt_team.process_execution_service.GetTreatmentsByPatientIDResponse
	(*TreatmentLight)(nil),                   // 5: alt_team.process_execution_service.TreatmentLight
	(*GetTreatmentByIDRequest)(nil),          // 6: alt_team.process_execution_service.GetTreatmentByIDRequest
	(*GetTreatmentByIDResponse)(nil),         // 7: alt_team.process_execution_service.GetTreatmentByIDResponse
	(*Treatment)(nil),                        // 8: alt_team.process_execution_service.Treatment
	(*Task)(nil),                             // 9: alt_team.process_execution_service.Task
	(*PatternInstance)(nil),                  // 10: alt_team.process_execution_service.PatternInstance
	(*timestamppb.Timestamp)(nil),            // 11: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),           // 12: google.protobuf.StringValue
}
var file_proto_process_execution_service_proto_depIdxs = []int32{
	5,  // 0: alt_team.process_execution_service.GetTreatmentsByPatientIDResponse.treatment_light:type_name -> alt_team.process_execution_service.TreatmentLight
	8,  // 1: alt_team.process_execution_service.GetTreatmentByIDResponse.treatment:type_name -> alt_team.process_execution_service.Treatment
	0,  // 2: alt_team.process_execution_service.Treatment.status:type_name -> alt_team.process_execution_service.TreatmentStatus
	10, // 3: alt_team.process_execution_service.Treatment.pattern_instance:type_name -> alt_team.process_execution_service.PatternInstance
	11, // 4: alt_team.process_execution_service.Treatment.started_at:type_name -> google.protobuf.Timestamp
	11, // 5: alt_team.process_execution_service.Treatment.finished_at:type_name -> google.protobuf.Timestamp
	11, // 6: alt_team.process_execution_service.Treatment.deleted_at:type_name -> google.protobuf.Timestamp
	1,  // 7: alt_team.process_execution_service.Task.status:type_name -> alt_team.process_execution_service.TaskStatus
	9,  // 8: alt_team.process_execution_service.Task.children:type_name -> alt_team.process_execution_service.Task
	12, // 9: alt_team.process_execution_service.Task.comment:type_name -> google.protobuf.StringValue
	2,  // 10: alt_team.process_execution_service.PatternInstance.status:type_name -> alt_team.process_execution_service.PatternInstanceStatus
	11, // 11: alt_team.process_execution_service.PatternInstance.created_at:type_name -> google.protobuf.Timestamp
	11, // 12: alt_team.process_execution_service.PatternInstance.updated_at:type_name -> google.protobuf.Timestamp
	11, // 13: alt_team.process_execution_service.PatternInstance.deleted_at:type_name -> google.protobuf.Timestamp
	9,  // 14: alt_team.process_execution_service.PatternInstance.tasks:type_name -> alt_team.process_execution_service.Task
	3,  // 15: alt_team.process_execution_service.ProcessExecutionService.GetTreatmentsByPatientID:input_type -> alt_team.process_execution_service.GetTreatmentsByPatientIDRequest
	6,  // 16: alt_team.process_execution_service.ProcessExecutionService.GetTreatmentByID:input_type -> alt_team.process_execution_service.GetTreatmentByIDRequest
	4,  // 17: alt_team.process_execution_service.ProcessExecutionService.GetTreatmentsByPatientID:output_type -> alt_team.process_execution_service.GetTreatmentsByPatientIDResponse
	7,  // 18: alt_team.process_execution_service.ProcessExecutionService.GetTreatmentByID:output_type -> alt_team.process_execution_service.GetTreatmentByIDResponse
	17, // [17:19] is the sub-list for method output_type
	15, // [15:17] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_process_execution_service_proto_init() }
func file_proto_process_execution_service_proto_init() {
	if File_proto_process_execution_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_process_execution_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreatmentsByPatientIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_execution_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreatmentsByPatientIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_execution_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreatmentLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_execution_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreatmentByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_execution_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreatmentByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_execution_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treatment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_execution_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_execution_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_process_execution_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_process_execution_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_process_execution_service_proto_goTypes,
		DependencyIndexes: file_proto_process_execution_service_proto_depIdxs,
		EnumInfos:         file_proto_process_execution_service_proto_enumTypes,
		MessageInfos:      file_proto_process_execution_service_proto_msgTypes,
	}.Build()
	File_proto_process_execution_service_proto = out.File
	file_proto_process_execution_service_proto_rawDesc = nil
	file_proto_process_execution_service_proto_goTypes = nil
	file_proto_process_execution_service_proto_depIdxs = nil
}
